# -*- coding: utf-8 -*-
"""my_maze.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ka6k0651UHxwH6HQMXcltqhT8apyjVmk
"""

import numpy as np
import matplotlib.pyplot as plt
import time
from IPython import display
import random

# Implemented methods
methods = ['DynProg', 'ValIter']

# Some colours
LIGHT_RED = '#FFC4CC'
LIGHT_GREEN = '#95FD99'
BLACK = '#000000'
WHITE = '#FFFFFF'
LIGHT_PURPLE = '#E8D0FF'
LIGHT_ORANGE = '#FAE0C3'


class Maze:
    '''
    Maze class for Player(P) with a Minotaur(M) in the maze
    '''
    # Actions
    STAY = 0
    MOVE_LEFT = 1
    MOVE_RIGHT = 2
    MOVE_UP = 3
    MOVE_DOWN = 4

    # Give names to actions
    actions_names = {
        STAY: "stay",
        MOVE_LEFT: "move left",
        MOVE_RIGHT: "move right",
        MOVE_UP: "move up",
        MOVE_DOWN: "move down"
    }

    # Reward values
    STEP_REWARD = -1
    GOAL_REWARD = 0
    IMPOSSIBLE_REWARD = -200
    EAT_REWARD = -100  # The reward of being eatten by minotaur

    def __init__(self, maze, stay=False, weights=None, random_rewards=False):
        """ Constructor of the environment Maze.
        """
        self.m_stay = stay
        self.maze = maze
        self.actions = self.__actions()  # Actions of player
        self.states, self.map = self.__states()
        self.n_actions = len(self.actions)  # Number of actions for player
        self.n_states = len(self.states)
        self.transition_probabilities = self.__transitions()
        self.rewards = self.__rewards(weights=weights, random_rewards=random_rewards)

    def __actions(self):
        actions = dict()
        # The player always can stay
        actions[self.STAY] = (0, 0)
        actions[self.MOVE_LEFT] = (0, -1)
        actions[self.MOVE_RIGHT] = (0, 1)
        actions[self.MOVE_UP] = (-1, 0)
        actions[self.MOVE_DOWN] = (1, 0)
        return actions


    def __states(self):
        '''
        Return values:
        -- states: mappping from state index to positions of player and minotaur
                   states[s][0] = position of player
                   states[s][1] = position of minotaur
        -- map: reverse mapping from position to state index
        '''
        states = dict()
        map = dict()
        s = 0

        for i in range(self.maze.shape[0]):
            for j in range(self.maze.shape[1]):
                for m in range(self.maze.shape[0]):
                    for n in range(self.maze.shape[1]):
                        # if self.maze[i, j] != 1 and self.maze[m, n] != 1:
                        if self.maze[i, j] != 1:
                            states[s] = ((i, j), (m, n))
                            map[((i, j), (m, n))] = s
                            s += 1
        return states, map


    def __move(self, state, action_p):
        """ Makes a step in the maze, given a current position and an action.
            If the action STAY or an inadmissible action is used, the agent stays in place.
            Inout values:
            -- state: current state index of the player and the minotaur
            -- action_p: current action index of player
            -- action_m: current action index of minotaur
            Return values:
            :return tuple next_cell: Position (x,y) on the maze that agent transitions to.
        """
        # Compute the future position of player given current (state, action)
        row_p = self.states[state][0][0] + self.actions[action_p][0]
        col_p = self.states[state][0][1] + self.actions[action_p][1]

        # Is the future position of the player an impossible one ?
        hitting_walls_p = (row_p == -1) or (row_p == self.maze.shape[0]) or \
                          (col_p == -1) or (col_p == self.maze.shape[1]) or \
                          (self.maze[row_p, col_p] == 1)

        if hitting_walls_p:
            row_p = self.states[state][0][0]
            col_p = self.states[state][0][1]

        # Compute the future position of minotaur given current (state, action)
        if self.m_stay:
            start_a = 0
        else:
            start_a = 1

        next_state_all = []
        for action_m in range(start_a, self.n_actions):
            row_m = self.states[state][1][0] + self.actions[action_m][0]
            col_m = self.states[state][1][1] + self.actions[action_m][1]

            invalid_maze_m = (row_m == -1) or (row_m == self.maze.shape[0]) or \
                             (col_m == -1) or (col_m == self.maze.shape[1])

            if not invalid_maze_m:
                state_idx = self.map[((row_p, col_p), (row_m, col_m))]
                next_state_all.append(state_idx)

        return next_state_all

        # Based on the impossiblity check return the next state.
        # First check minotaur
        # if invalid_maze_m:
        #     # If minotaur can't stay and will be in invalid position, next state will be impossible
        #     if not self.m_stay:
        #         return None
        #     # If minotaur can stay, just stay and return the old position
        #     else:
        #         m_return = self.states[state][1]
        # else:
        #     m_return = (row_m, col_m)
        # # Next check player
        # if hitting_walls_p:
        #     return self.map[(self.states[state][0], m_return)]
        #     # Both player and minotaur are fine at next state
        # else:
        #     return self.map[((row_p, col_p), m_return)]


    def __transitions(self):
        """ Computes the transition probabilities for every state action pair.
            :return numpy.tensor transition probabilities: tensor of transition
            probabilities of dimension S*S*A
        """
        # Initialize the transition probailities tensor (S,S,A)
        # Note only the action of player is included and determined in this matrix
        # The action of minotaur is still random
        dimensions = (self.n_states, self.n_states, self.n_actions)
        transition_probabilities = np.zeros(dimensions)

        # Compute the transition probabilities
        # for s in range(self.n_states):
        #     for a_p in range(self.n_actions_p):
        #         num_next_s = 0  # Save total number of possible next state when s and a_p are set
        #         next_s_all = []  # Save all possible next states
        #         # Compute the possible next state when both actions of P and M are considered
        #         for a_m in range(self.n_actions_m):
        #             next_s = self.__move(s, a_p, a_m)
        #             # Check if next state is valid
        #             if next_s != None:
        #                 next_s_all.append(next_s)
        #                 num_next_s += 1
        #
        #         for next_s in next_s_all:
        #             transition_probabilities[next_s, s, a_p] = 1 / num_next_s
        #             The random action of minotaur introduce uncertainty in the transition probability,
        #             since the action of minotaur is not set and included in this matrix

        for s in range(self.n_states):
            for a in range(self.n_actions):
                next_state_all = self.__move(s, a)
                prob_next_s = 1 / len(next_state_all)
                for next_s in next_state_all:
                    transition_probabilities[next_s, s, a] = prob_next_s
        return transition_probabilities


    def __rewards(self, weights=None, random_rewards=None):
        rewards = np.zeros((self.n_states, self.n_actions))

        # If the rewards are not described by a weight matrix
        if weights is None:
            for s in range(self.n_states):
                for a in range(self.n_actions):
                    next_state_all = self.__move(s, a)
                    for next_s in next_state_all:
                        # Reward for hitting a wall
                        if self.states[s][0] == self.states[next_s][0] and a != self.STAY:
                            rewards[s, a] += self.IMPOSSIBLE_REWARD
                        # Reward for reaching the exit without being eaten by minotaur at the exit
                        elif self.states[s][0] == self.states[next_s][0] and \
                                self.states[next_s][0] != self.states[next_s][1] and \
                                self.maze[self.states[next_s][0]] == 2:
                            rewards[s, a] += self.GOAL_REWARD
                        # Reward for being eaten by the minotaur
                        elif self.states[next_s][0] == self.states[next_s][1]:
                            rewards[s, a] += self.EAT_REWARD
                        # Reward for taking a step to an empty cell that is not the exit
                        else:
                            rewards[s, a] += self.STEP_REWARD
                    # Divide the reward by the total number of possible states for all a_m in the fixed s and a_p
                    rewards[s, a] /= len(next_state_all)
        return rewards


    def simulate(self, start, policy, method):
        '''
        Return: path, path[k] = ((i,j), (m,n))
        '''
        if method not in methods:
            error = 'ERROR: the argument method must be in {}'.format(methods)
            raise NameError(error)

        path = list()
        if method == 'DynProg':
            # Deduce the horizon from the policy shape
            horizon = policy.shape[1]
            # Initialize current state and time
            t = 0
            s = self.map[start]
            # Add the starting position in the maze to the path
            path.append(start)
            while t < horizon - 1:
                # Randomly select one as next state since a_m is random
                next_s = random.choice(self.__move(s, policy[s, t]))
                # Add the position in the maze corresponding to the next state to the path
                path.append(self.states[next_s])
                # Update time and state for next iteration
                t += 1
                s = next_s

        if method == 'ValIter':
            # Initialize current state, next state and time
            t = 1
            s = self.map[start]
            # Add the starting position in the maze to the path
            path.append(start)
            # Randomly select one as next state since a_m is random
            next_s = random.choice(self.__move(s, policy[s]))
            # Add the position in the maze corresponding to the next state to the path
            path.append(self.states[next_s])

            # Loop while state is not the goal state
            while not (self.states[s][0] == self.states[next_s][0] and
                       self.states[next_s][0] != self.states[next_s][1] and
                       self.maze[self.states[next_s][0]] == 2):
                # Update state
                s = next_s
                # Randomly select one as next state since a_m is random
                next_s = random.choice(self.__move(s, policy[s]))
                # Add the position in the maze corresponding to the next state to the path
                path.append(self.states[next_s])
                # Update time and state for next iteration
                t += 1
        return path

    def show(self):
        print('The states are :')
        print(self.states)
        print('The actions are:')
        print(self.actions)
        print('The mapping of the states:')
        print(self.map)
        print('The rewards:')
        print(self.rewards)


def dynamic_programming(env, horizon):
    """ Solves the shortest path problem using dynamic programming
        :input Maze env           : The maze environment in which we seek to
                                    find the shortest path.
        :input int horizon        : The time T up to which we solve the problem.
        :return numpy.array V     : Optimal values for every state at every
                                    time, dimension S*T
        :return numpy.array policy: Optimal time-varying policy at every state,
                                    dimension S*T
    """

    # The dynamic prgramming requires the knowledge of :
    # - Transition probabilities
    # - Rewards
    # - State space
    # - Action space
    # - The finite horizon
    p = env.transition_probabilities
    r = env.rewards
    n_states = env.n_states
    n_actions = env.n_actions
    T = horizon

    # The variables involved in the dynamic programming backwards recursions
    V = np.zeros((n_states, T + 1))
    policy = np.zeros((n_states, T + 1))
    Q = np.zeros((n_states, n_actions))

    # Initialization
    Q = np.copy(r)
    V[:, T] = np.max(Q, 1)
    policy[:, T] = np.argmax(Q, 1)

    # The dynamic programming bakwards recursion
    for t in range(T - 1, -1, -1):
        # Update the value function acccording to the bellman equation
        for s in range(n_states):
            for a in range(n_actions):
                # Update of the temporary Q values
                # Start updating from t=T (V[T] is known)
                Q[s, a] = r[s, a] + np.dot(p[:, s, a], V[:, t + 1])
        # Update by taking the maximum Q value w.r.t the action a
        V[:, t] = np.max(Q, 1)
        # The optimal action is the one that maximizes the Q function
        policy[:, t] = np.argmax(Q, 1)
    return V, policy


def value_iteration(env, gamma, epsilon):
    """ Solves the shortest path problem using value iteration
        :input Maze env           : The maze environment in which we seek to
                                    find the shortest path.
        :input float gamma        : The discount factor.
        :input float epsilon      : accuracy of the value iteration procedure.
        :return numpy.array V     : Optimal values for every state at every
                                    time, dimension S*T
        :return numpy.array policy: Optimal time-varying policy at every state,
                                    dimension S*T
    """
    # The value itearation algorithm requires the knowledge of :
    # - Transition probabilities
    # - Rewards
    # - State space
    # - Action space
    # - The finite horizon
    p = env.transition_probabilities
    r = env.rewards
    n_states = env.n_states
    n_actions = env.n_actions

    # Required variables and temporary ones for the VI to run
    V = np.zeros(n_states)
    Q = np.zeros((n_states, n_actions))
    BV = np.zeros(n_states)
    # Iteration counter
    n = 0
    # Tolerance error
    tol = (1 - gamma) * epsilon / gamma

    # Initialization of the VI
    for s in range(n_states):
        for a in range(n_actions):
            Q[s, a] = r[s, a] + gamma * np.dot(p[:, s, a], V)
    BV = np.max(Q, 1)

    # Iterate until convergence
    while np.linalg.norm(V - BV) >= tol and n < 200:
        # Increment by one the numbers of iteration
        n += 1
        # Update the value function
        V = np.copy(BV)
        # Compute the new BV
        for s in range(n_states):
            for a in range(n_actions):
                Q[s, a] = r[s, a] + gamma * np.dot(p[:, s, a], V)
        BV = np.max(Q, 1)
        # Choose the max Q[s,a] in each row (best action)
        # Show error
        # print(np.linalg.norm(V - BV))

    # Compute policy
    policy = np.argmax(Q, 1)
    # Choose the column index of the max Q[s,a] in each row (index of best action)
    # Return the obtained policy
    return V, policy


def draw_maze(maze):
    # Map a color to each cell in the maze
    col_map = {0: WHITE, 1: BLACK, 2: LIGHT_GREEN, -6: LIGHT_RED, -1: LIGHT_RED}

    # Give a color to each cell
    rows, cols = maze.shape
    colored_maze = [[col_map[maze[j, i]] for i in range(cols)] for j in range(rows)]

    # Create figure of the size of the maze
    fig = plt.figure(1, figsize=(cols, rows))

    # Remove the axis ticks and add title title
    ax = plt.gca()
    ax.set_title('The Maze')
    ax.set_xticks([])
    ax.set_yticks([])

    # Give a color to each cell
    rows, cols = maze.shape
    colored_maze = [[col_map[maze[j, i]] for i in range(cols)] for j in range(rows)]

    # Create figure of the size of the maze
    fig = plt.figure(1, figsize=(cols, rows))

    # Create a table to color
    grid = plt.table(cellText=None,
                     cellColours=colored_maze,
                     cellLoc='center',
                     loc=(0, 0),
                     edges='closed')
    # Modify the hight and width of the cells in the table
    tc = grid.properties()['children']
    for cell in tc:
        cell.set_height(1.0 / rows)
        cell.set_width(1.0 / cols)


def animate_solution(maze, path):
    # Map a color to each cell in the maze
    col_map = {0: WHITE, 1: BLACK, 2: LIGHT_GREEN, -6: LIGHT_RED, -1: LIGHT_RED}

    # Size of the maze
    rows, cols = maze.shape

    # Create figure of the size of the maze
    fig = plt.figure(1, figsize=(cols, rows))

    # Remove the axis ticks and add title title
    ax = plt.gca()
    ax.set_title('Policy simulation')
    ax.set_xticks([])
    ax.set_yticks([])

    # Give a color to each cell
    colored_maze = [[col_map[maze[j, i]] for i in range(cols)] for j in range(rows)]

    # Create figure of the size of the maze
    fig = plt.figure(1, figsize=(cols, rows))

    # Create a table to color
    grid = plt.table(cellText=None,
                     cellColours=colored_maze,
                     cellLoc='center',
                     loc=(0, 0),
                     edges='closed')

    # Modify the hight and width of the cells in the table
    tc = grid.properties()['children']
    for cell in tc:
        cell.set_height(1.0 / rows)
        cell.set_width(1.0 / cols)

    # Update the color at each frame
    for i in range(len(path)):
        # Update the position of player
        grid.get_celld()[path[i][0]].set_facecolor(LIGHT_ORANGE)
        grid.get_celld()[path[i][0]].get_text().set_text('Player')
        # Update the position of minotaur
        grid.get_celld()[path[i][1]].set_facecolor(LIGHT_RED)
        grid.get_celld()[path[i][1]].get_text().set_text('Minotaur')

        if i > 0:
            # Update the animation if the player is being caught by minotaur
            if path[i][0] == path[i][1]:
                grid.get_celld()[(path[i][0])].set_facecolor(LIGHT_RED)
                grid.get_celld()[(path[i][0])].get_text().set_text('Player has been eatten!')
            # Update the animation if the player is successfully out
            elif path[i][0] == path[i - 1][0] and maze[path[i][0]] == 2:
                grid.get_celld()[(path[i][0])].set_facecolor(LIGHT_GREEN)
                grid.get_celld()[(path[i][0])].get_text().set_text('Player is out!')
            else:
                grid.get_celld()[(path[i - 1][0])].set_facecolor(col_map[maze[path[i - 1][0]]])
                grid.get_celld()[(path[i - 1][0])].get_text().set_text('')
                grid.get_celld()[(path[i - 1][1])].set_facecolor(col_map[maze[path[i - 1][1]]])
                grid.get_celld()[(path[i - 1][1])].get_text().set_text('')

        display.display(fig)
        display.clear_output(wait=True)
        time.sleep(1)
